//==============================================================================
// 文件：LaserPoint.h
// 作者：Yunsio
// 日期：2025-10-06
// 描述：激光点数据结构定义，用于存储激光扫描仪的点数据
//      兼容 Beyond/Pangolin 激光协议格式（28字节 = 7个float）
//==============================================================================

#pragma once

#include <cstdint>
#include <cmath>
#include <algorithm>

namespace BeyondLink {
namespace Core {

//==========================================================================
// 结构体：LaserPoint
// 描述：激光点数据结构，包含位置、颜色和控制信息
//      每个点占用 28 字节，与 Beyond 激光协议完全兼容
//      注意：颜色值存储在当前点但属于前一个点（协议特性）
//==========================================================================
struct LaserPoint {
    // 位置坐标（归一化到 [-1.0, 1.0] 范围）
    float X;        // X 坐标（偏移 0，4 字节）
    float Y;        // Y 坐标（偏移 4，4 字节）
    
    // RGB 颜色通道（归一化到 [0.0, 1.0] 范围）
    float R;        // 红色通道（偏移 8，4 字节）
    float G;        // 绿色通道（偏移 12，4 字节）
    float B;        // 蓝色通道（偏移 16，4 字节）
    
    // 扩展属性
    float Z;        // 深度/时间标记，用于光束检测（偏移 20，4 字节）
                    // Z > 0 表示该点为光束点，需要特殊渲染
    float Focus;    // 聚焦值 [0.0, 1.0]（偏移 24，4 字节）

    //==========================================================================
    // 构造函数：LaserPoint (默认)
    // 描述：创建一个初始化为零的激光点
    //==========================================================================
    LaserPoint()
        : X(0.0f), Y(0.0f), R(0.0f), G(0.0f), B(0.0f), Z(0.0f), Focus(0.0f) {}

    //==========================================================================
    // 构造函数：LaserPoint (位置+颜色)
    // 描述：创建一个指定位置和颜色的激光点
    // 参数：
    //   x, y - 点的位置坐标
    //   r, g, b - 点的 RGB 颜色值
    //==========================================================================
    LaserPoint(float x, float y, float r, float g, float b)
        : X(x), Y(y), R(r), G(g), B(b), Z(0.0f), Focus(0.0f) {}

    //==========================================================================
    // 构造函数：LaserPoint (完整参数)
    // 描述：创建一个包含所有属性的激光点
    // 参数：
    //   x, y - 点的位置坐标
    //   r, g, b - 点的 RGB 颜色值
    //   z - 深度/光束标记
    //   focus - 聚焦值
    //==========================================================================
    LaserPoint(float x, float y, float r, float g, float b, float z, float focus)
        : X(x), Y(y), R(r), G(g), B(b), Z(z), Focus(focus) {}

    //==========================================================================
    // 函数：IsBlankPoint
    // 描述：判断点是否为空白点（无可见颜色）
    // 返回值：
    //   true - 该点颜色接近黑色（R/G/B 都接近 0）
    //   false - 该点有可见颜色
    //==========================================================================
    bool IsBlankPoint() const {
        return (R <= 0.0001f && G <= 0.0001f && B <= 0.0001f);
    }

    //==========================================================================
    // 函数：GetLuminance
    // 描述：计算点的感知亮度（使用标准 ITU-R BT.601 公式）
    // 返回值：
    //   亮度值 [0.0, 1.0]
    //==========================================================================
    float GetLuminance() const {
        return R * 0.299f + G * 0.587f + B * 0.114f;
    }

    //==========================================================================
    // 函数：IsSamePosition
    // 描述：判断两个点的位置是否相同（在误差范围内）
    // 参数：
    //   other - 要比较的另一个点
    //   epsilon - 位置比较的误差容限（默认 0.0001）
    // 返回值：
    //   true - 两点位置相同
    //   false - 两点位置不同
    //==========================================================================
    bool IsSamePosition(const LaserPoint& other, float epsilon = 0.0001f) const {
        return (std::abs(X - other.X) < epsilon && std::abs(Y - other.Y) < epsilon);
    }
};

// 确保结构体大小为28字节（7个float）
static_assert(sizeof(LaserPoint) == 28, "LaserPoint must be 28 bytes (7 floats)");

} // namespace Core
} // namespace BeyondLink

