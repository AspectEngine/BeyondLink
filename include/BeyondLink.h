//==============================================================================
// 文件：BeyondLink.h
// 作者：Yunsio
// 日期：2025-10-06
// 描述：BeyondLink 主系统接口
//      整合网络接收、数据处理、渲染输出等所有模块
//      提供简洁的 API 用于 Beyond 激光数据的实时可视化
//==============================================================================

#pragma once

#include "LaserRenderer.h"
#include "LaserProtocol.h"
#include "LaserSource.h"
#include "LaserSettings.h"
#include <memory>
#include <unordered_map>

namespace BeyondLink {

//==========================================================================
// 类：BeyondLinkSystem
// 描述：BeyondLink 主系统类
//      协调所有子系统：
//      - LaserProtocol：UDP 多播接收和数据解析
//      - LaserSource：激光点数据处理和扫描仪模拟
//      - LaserRenderer：DirectX 11 GPU 渲染
//      
//      典型使用流程：
//      1. 创建 BeyondLinkSystem 实例
//      2. 调用 Initialize() 初始化系统
//      3. 调用 StartNetworkReceiver() 启动网络接收
//      4. 主循环中调用 Update() 和 Render()
//      5. 使用 GetLaserTexture(deviceID) 获取渲染纹理显示
//      6. 程序退出时调用 Shutdown()
//==========================================================================
class BeyondLinkSystem {
public:
    //==========================================================================
    // 构造函数：BeyondLinkSystem
    // 描述：创建 BeyondLink 系统实例
    // 参数：
    //   settings - 激光系统配置参数（使用默认值如果不提供）
    //==========================================================================
    explicit BeyondLinkSystem(const Core::LaserSettings& settings = Core::LaserSettings());
    ~BeyondLinkSystem();

    //==========================================================================
    // 函数：Initialize
    // 描述：初始化 BeyondLink 系统
    //      - 创建 DirectX 11 设备和渲染器
    //      - 创建网络协议处理器
    //      - 为所有设备创建激光源
    // 参数：
    //   hwnd - 窗口句柄（nullptr 表示无窗口模式）
    // 返回值：
    //   true - 初始化成功
    //   false - 初始化失败
    //==========================================================================
    bool Initialize(HWND hwnd = nullptr);
    
    //==========================================================================
    // 函数：Shutdown
    // 描述：关闭 BeyondLink 系统并释放所有资源
    //==========================================================================
    void Shutdown();
    
    //==========================================================================
    // 函数：IsRunning
    // 描述：检查系统是否正在运行
    // 返回值：
    //   true - 系统已初始化且网络接收正在运行
    //   false - 系统未运行
    //==========================================================================
    bool IsRunning() const;

    //==========================================================================
    // 函数：StartNetworkReceiver
    // 描述：启动网络接收器
    //      绑定 UDP 端口、加入多播组、启动接收线程
    // 参数：
    //   localIP - 本地 IP 地址（空字符串表示 INADDR_ANY）
    // 返回值：
    //   true - 启动成功
    //   false - 启动失败
    //==========================================================================
    bool StartNetworkReceiver(const std::string& localIP = "");
    
    //==========================================================================
    // 函数：StopNetworkReceiver
    // 描述：停止网络接收器
    //==========================================================================
    void StopNetworkReceiver();

    //==========================================================================
    // 函数：Update
    // 描述：更新所有激光源的数据处理（每帧调用）
    //      应用扫描仪模拟、光束检测等算法
    //==========================================================================
    void Update();

    //==========================================================================
    // 函数：Render
    // 描述：渲染所有激光源到纹理（每帧调用）
    //      使用 DirectX 11 将点云渲染到 HDR 纹理
    //==========================================================================
    void Render();

    //==========================================================================
    // 函数：GetLaserTexture
    // 描述：获取指定设备的激光渲染纹理
    // 参数：
    //   deviceID - 设备 ID (0-3)
    // 返回值：
    //   纹理的 ShaderResourceView 指针（nullptr 表示设备不存在）
    //==========================================================================
    ID3D11ShaderResourceView* GetLaserTexture(int deviceID);

    //==========================================================================
    // 函数：GetLaserSource
    // 描述：获取指定设备的激光源（用于高级操作）
    // 参数：
    //   deviceID - 设备 ID
    // 返回值：
    //   激光源智能指针（nullptr 表示设备不存在）
    //==========================================================================
    std::shared_ptr<Core::LaserSource> GetLaserSource(int deviceID);

    //==========================================================================
    // 函数：GetRenderer
    // 描述：获取渲染器指针（用于高级操作）
    // 返回值：
    //   LaserRenderer 指针
    //==========================================================================
    LaserRenderer* GetRenderer() { return m_Renderer.get(); }

    //==========================================================================
    // 函数：GetNetworkStats
    // 描述：获取网络统计信息
    // 返回值：
    //   网络统计信息结构体
    //==========================================================================
    Core::LaserProtocol::NetworkStats GetNetworkStats() const;

    //==========================================================================
    // 函数：GetSettings
    // 描述：获取/访问系统配置参数
    // 返回值：
    //   配置参数的引用
    //==========================================================================
    Core::LaserSettings& GetSettings() { return m_Settings; }
    const Core::LaserSettings& GetSettings() const { return m_Settings; }

private:
    //==========================================================================
    // 函数：OnLaserDataReceived
    // 描述：网络数据接收回调函数（内部使用）
    //      当接收到激光数据包时被调用，更新对应设备的激光源
    // 参数：
    //   deviceID - 设备 ID
    //   points - 解析后的激光点列表
    //==========================================================================
    void OnLaserDataReceived(int deviceID, const std::vector<Core::LaserPoint>& points);

    //==========================================================================
    // 函数：EnsureLaserSource
    // 描述：确保指定设备的激光源存在（如不存在则创建）
    // 参数：
    //   deviceID - 设备 ID
    //==========================================================================
    void EnsureLaserSource(int deviceID);

private:
    Core::LaserSettings m_Settings;                                      // 系统配置
    bool m_Initialized;                                                  // 初始化标志

    // 核心组件
    std::unique_ptr<LaserRenderer> m_Renderer;                           // 渲染器
    std::unique_ptr<Core::LaserProtocol> m_Protocol;                     // 网络协议处理器
    
    // 激光源管理（设备 ID → 激光源）
    std::unordered_map<int, std::shared_ptr<Core::LaserSource>> m_LaserSources;
    std::mutex m_SourcesMutex;                                           // 激光源访问互斥锁
};

} // namespace BeyondLink
